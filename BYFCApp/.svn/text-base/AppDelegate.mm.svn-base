//
//  AppDelegate.m
//  BYFCApp
//
//  Created by PengLee on 14/12/2.
//  Copyright (c) 2014年 PengLee. All rights reserved.
//
#import "AppDelegate.h"
#import "GesturePasswordController.h"
#import "ViewController.h"
#import "PL_Header.h"
#import "Reachability.h"
#import "UMSocialWechatHandler.h"
#import "ShakeFeed.h"
#import "UMessage.h"
#define UMSYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v)  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)
@interface AppDelegate ()<BMKGeneralDelegate>
{
    Reachability *hostReach;
      BMKMapManager * _manager;
}
 @property (nonatomic, strong) Reachability *conn;
@end

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    // Override point for customization after application launch.
    [self UmengMessage:launchOptions];
    
    @try {
        self.window = [[ShakeFeed alloc]initWithFrame:[UIScreen mainScreen].bounds
                       ];
        application.applicationSupportsShakeToEdit = YES;
        [self becomeFirstResponder];
        self.window.backgroundColor = [UIColor whiteColor];
        //判断是否是第一次启动
               if (APP_FIRST_LAUNCH_BOOL)
        {
            NSLog(@"first  launch");
            KeychainItemWrapper * keychin = [[KeychainItemWrapper alloc]initWithIdentifier:@"Gesture" accessGroup:nil];
            [keychin resetKeychainItem];
             UINavigationController * nav = [[UINavigationController alloc]initWithRootViewController:[ViewController new]];
            self.window.rootViewController = nav;
        }
        else
        {
            NSLog(@"second launch");
            if (![PL_USER_STORAGE objectForKey:PL_USER_NAME] || ![PL_USER_STORAGE objectForKey:PL_USER_PASSWORD] || APP_FIRST_LAUNCH_BOOL)
            {
                UINavigationController * nav = [[UINavigationController alloc]initWithRootViewController:[ViewController new]];
                self.window.rootViewController = nav;
            }
            else
            {
                
                
               [self loginMyCard];
               MainViewController * main = [[MainViewController alloc]init];
               UINavigationController * nav = [[UINavigationController alloc]initWithRootViewController:main];
               self.window.rootViewController = nav;
               GesturePasswordController *gesture=[[GesturePasswordController alloc]init];
               
              dispatch_async(dispatch_get_main_queue(), ^{
                    [nav  presentViewController:gesture animated:YES completion:nil];
                });
            }
        }
        //监测网络
        [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(reachabilityChanged:) name:kReachabilityChangedNotification object:nil];
        hostReach = [Reachability reachabilityWithHostName:@"www.baidu.com"];
        [hostReach startNotifier];
        
        [UMSocialData setAppKey:um_appkey];
        
        [UMSocialConfig setSupportedInterfaceOrientations:UIInterfaceOrientationMaskAll];
        [UMSocialWechatHandler setWXAppId:um_weixinappkey appSecret:um_weixinsecert url:um_url];
        
        [UMSocialData openLog:YES];
       
       
        
        [[PgyManager sharedPgyManager]setEnableFeedback:NO];
        
        [[PgyManager sharedPgyManager]startManagerWithAppId:Pg_sdk_id];
        [[PgyManager sharedPgyManager]checkUpdate];

        NSLog(@"沙盒路径：%@",NSHomeDirectory());
      
        _manager = [[BMKMapManager alloc]init];
        BOOL ret = [_manager start:map_appkey generalDelegate:self];
        if (!ret)
        {
            NSLog(@"认证失败");
            
        }
        
         [_window makeKeyAndVisible];
        
    }
    @catch (NSException *exception) {
        NSLog(@"expect==%@",exception);
        
    }
    @finally {
        
        
    }
    return YES;
}
- (void)UmengMessage:(NSDictionary *)launchOptions
{
    //set AppKey and AppSecret
    [UMessage startWithAppkey:@"55a5c4f667e58e903b007641" launchOptions:launchOptions];
    
#if __IPHONE_OS_VERSION_MAX_ALLOWED >= _IPHONE80_
    if(UMSYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@"8.0"))
    {
        //register remoteNotification types （iOS 8.0及其以上版本）
        UIMutableUserNotificationAction *action1 = [[UIMutableUserNotificationAction alloc] init];
        action1.identifier = @"action1_identifier";
        action1.title=@"Accept";
        action1.activationMode = UIUserNotificationActivationModeForeground;//当点击的时候启动程序
        
        UIMutableUserNotificationAction *action2 = [[UIMutableUserNotificationAction alloc] init];  //第二按钮
        action2.identifier = @"action2_identifier";
        action2.title=@"Reject";
        action2.activationMode = UIUserNotificationActivationModeBackground;//当点击的时候不启动程序，在后台处理
        action2.authenticationRequired = YES;//需要解锁才能处理，如果action.activationMode = UIUserNotificationActivationModeForeground;则这个属性被忽略；
        action2.destructive = YES;
        UIMutableUserNotificationCategory *categorys = [[UIMutableUserNotificationCategory alloc] init];
        categorys.identifier = @"category1";//这组动作的唯一标示
        [categorys setActions:@[action1,action2] forContext:(UIUserNotificationActionContextDefault)];
        
        UIUserNotificationSettings *userSettings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeBadge|UIUserNotificationTypeSound|UIUserNotificationTypeAlert
                                                                                     categories:[NSSet setWithObject:categorys]];
        [UMessage registerRemoteNotificationAndUserNotificationSettings:userSettings];
        
    } else{
        //register remoteNotification types (iOS 8.0以下)
        [UMessage registerForRemoteNotificationTypes:UIRemoteNotificationTypeBadge
         |UIRemoteNotificationTypeSound
         |UIRemoteNotificationTypeAlert];
    }
#else
    
    //register remoteNotification types (iOS 8.0以下)
    [UMessage registerForRemoteNotificationTypes:UIRemoteNotificationTypeBadge
     |UIRemoteNotificationTypeSound
     |UIRemoteNotificationTypeAlert];
    
#endif
    //for log
    [UMessage setLogEnabled:YES];
    
}
#pragma mark --检测网络状态和key值是否授权成功
- (void)onGetNetworkState:(int)iError
{
    if (0 == iError) {
        NSLog(@"联网成功");
    }
    else{
        NSLog(@"onGetNetworkState %d",iError);
    }
    
}

- (void)onGetPermissionState:(int)iError
{
    if (0 == iError) {
        NSLog(@"授权成功");
    }
    else {
        NSLog(@"onGetPermissionState %d",iError);
    }
}

#pragma mark --增加忽略备份的文件的地址
-(BOOL)addSkipBackupAttributeToItemAtURL:(NSURL *)URL
{
    assert(![[NSFileManager defaultManager]fileExistsAtPath:[URL path]]);
    NSError * error = nil;
    BOOL success = [URL setResourceValue:[NSNumber numberWithBool:YES] forKey:NSURLIsExcludedFromBackupKey error:&error];
    if (success)
    {
        NSLog(@"ERRor excluding %@ from back %@",[URL lastPathComponent],error);
        
    }
    return success;
    
}


-(BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url
{
    return [UMSocialSnsService handleOpenURL:url wxApiDelegate:nil];
}
-(BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation
{
    return [UMSocialSnsService handleOpenURL:url];
    
}
//第二次启动登录，已经存在用户名和密码
- (void)loginMyCard
{
    if ([MyRequest checkNetWorking] == NETWORK_TYPE_TEST_WIFI)
    {
        PL_ALERT_SHOWNOT_OKAND_YES(@"您当前使用的时WIFI网络");
        
    }
    else
    {
        PL_ALERT_SHOWNOT_OKAND_YES(@"您当前使用的是本地网络");
        
    }
    [[MyRequest defaultsRequest]getWebServiceData:^(NSMutableString *string) {
        NSLog(@"123++%@",string);
        SBJSON * json = [[SBJSON alloc]init];
        NSDictionary * dict = [json objectWithString:string error:nil  ];
        
        
        [PL_USER_STORAGE setValue:dict[@"UserId"] forKey:PL_USER_USERID];
        
        [PL_USER_STORAGE setObject:[NSString stringWithFormat:@"%@",dict[@"UserCode"]] forKey:PL_USER_code];
        
        NSString * string1 =[dict objectForKey:PL_USER_TOKEN];
        NSLog(@"TOKEN==%@",string1);
        [PL_USER_STORAGE setObject:string1 forKey:PL_USER_TOKEN];
        [PL_USER_STORAGE setObject:dict[PL_USER_DUTYCODE] forKey:PL_USER_DUTYCODE];
        NSLog(@"Duty code ==== %@",[PL_USER_STORAGE objectForKey:PL_USER_DUTYCODE]);
        [ PL_USER_STORAGE setObject:dict[@"User_Phone"] forKey:PL_USER_PHONEnUM];
        [PL_USER_STORAGE setObject:[dict objectForKey:@"UserName"] forKey:@"UserName"];
        [PL_USER_STORAGE setObject:[dict objectForKey:@"EncodeUserCode"] forKey:@"encode"];
        [PL_USER_STORAGE synchronize];
        
    } userName:[PL_USER_STORAGE objectForKey:PL_USER_NAME] userPass:[PL_USER_STORAGE objectForKey:PL_USER_PASSWORD]];
}
-(NSString *) compareCurrentTime:(NSDate*) compareDate
//
{
    NSTimeInterval  timeInterval = [compareDate timeIntervalSinceNow];
    timeInterval = -timeInterval;
    long temp = 0;
    NSString *result;
    if((temp = timeInterval/60) <60){
        result = [NSString stringWithFormat:@"%ld分前",temp];
        NSLog(@"=====%@",result);
        if (temp<60) {
            GesturePasswordController *gesture=[[GesturePasswordController alloc]init];
            UINavigationController *nav=[[UINavigationController alloc]initWithRootViewController:gesture];
            nav.navigationBarHidden=YES;
           // self.window.rootViewController=nav;
        }else
        {
            ViewController *view=[[ViewController alloc]init];
            UINavigationController *nav=[[UINavigationController alloc]initWithRootViewController:view];
            nav.navigationBarHidden=YES;
            self.window.rootViewController=nav;
        }
    }
    return result;
}
-(void)applicationDidFinishLaunching:(UIApplication *)application
{
    
    //检测网络状态
    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(reachabilityChanged:) name:kReachabilityChangedNotification object:nil];
    hostReach = [Reachability reachabilityWithHostName:@"www.baidu.com"];
    [hostReach startNotifier];
    
    
}

-(void)reachabilityChanged:(NSNotification *)note
{
    
    Reachability * curReach = [note object];
    NSParameterAssert([curReach isKindOfClass:[Reachability class]]);
    NetworkStatus state = [curReach currentReachabilityStatus];
    if (state==NotReachable)
    {
        PL_ALERT_SHOWNOT_OKAND_YES(@"网络连接失败，请重新检查设置您的网络");
    }
    else
    {
        [self loginMyCard];
    }
   
}
//是否是WiFi信号
-(BOOL)isEnableWIFI
{
    return ([[Reachability reachabilityForLocalWiFi]currentReachabilityStatus]!=NotReachable);
    
}
-(BOOL)isEnable3g{
    return ([[Reachability reachabilityForInternetConnection]currentReachabilityStatus]!=NotReachable);
}

- (void)applicationWillResignActive:(UIApplication *)application {
     [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(reachabilityChanged:) name:kReachabilityChangedNotification object:nil];
    [BMKMapView willBackGround ];
   
    
}

- (void)applicationDidEnterBackground:(UIApplication *)application {
    
}

- (void)applicationWillEnterForeground:(UIApplication *)application {
    
    if ([PL_USER_STORAGE boolForKey:APP_FIRST_LAUNCH] && ![PL_USER_STORAGE objectForKey:PL_USER_NAME] && ![PL_USER_STORAGE objectForKey:PL_USER_PASSWORD])
    {
        PL_ALERT_SHOWNOT_OKAND_YES(@"请登录");
    }
    else if([PL_USER_STORAGE objectForKey:PL_USER_NAME] && [PL_USER_STORAGE objectForKey:PL_USER_PASSWORD]  )
    {
        
        GesturePasswordController *gesture=[[GesturePasswordController alloc]init];
       
        
        [self.window.rootViewController presentViewController:gesture animated:YES completion:nil];
        
    }
    
   
    

}

- (void)applicationDidBecomeActive:(UIApplication *)application {
   
    if (![PL_USER_STORAGE objectForKey:PL_USER_NAME] || ![PL_USER_STORAGE objectForKey:PL_USER_PASSWORD])
    {
        UINavigationController * nav = [[UINavigationController alloc]initWithRootViewController:[ViewController new]];
        self.window.rootViewController = nav;
    }
    else
    {
       // [self loginMyCard];
    }
    
  
   
    [UMSocialSnsService  applicationDidBecomeActive];
    [BMKMapView didForeGround];
   }

- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken
{
    [UMessage registerDeviceToken:deviceToken];
}
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo
{
    [UMessage didReceiveRemoteNotification:userInfo];
}
- (void)applicationWillTerminate:(UIApplication *)application {
   
}
- (BOOL)canBecomeFirstResponder
{
    return YES;
    
}
- (void)motionBegan:(UIEventSubtype)motion withEvent:(UIEvent *)event

{
    
    
    
}
- (void)motionEnded:(UIEventSubtype)motion withEvent:(UIEvent *)event
{
    
    
    
}
@end
